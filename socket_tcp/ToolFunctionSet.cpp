//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : army_tool_function
//  @ File Name : ToolFunctionSet.cpp
//  @ Date : 2012/12/27
//  @ Author : @sunyb
//
//


#include "stdafx.h"
#include "ToolFunctionSet.h"
#include <stdarg.h>
#include <Strsafe.h>

ToolFunctionSet::ToolFunctionSet()
{

}

ToolFunctionSet::~ToolFunctionSet()
{

}

void ToolFunctionSet::PrintfDebug(TCHAR * pszFormat, ...)
{
	TCHAR szBuffer[1024] = {0};
	va_list pArgList;

	va_start(pArgList, pszFormat);
	StringCchVPrintf(szBuffer, sizeof(szBuffer)/sizeof(TCHAR), pszFormat, pArgList);
	va_end(pArgList);

//	OutputDebugString(szBuffer);
}

void ToolFunctionSet::GetCurExePath(TCHAR * pExePath)
{
	::GetModuleFileName(NULL, pExePath, MAX_PATH);

	size_t dwLength;
	StringCchLength(pExePath, BUFSIZ, &dwLength);

	TCHAR *pStart = pExePath;
	TCHAR *pEnd   = pExePath + dwLength;

	while (pEnd--, *pEnd != _T('\\'));

	pStart[pEnd - pStart] = 0x00;
}

bool ToolFunctionSet::MByteToWChar(LPCSTR lpcszStr, DWORD dwBufSize, LPWSTR lpwszStr)
{
	DWORD dwMinSize;
	dwMinSize = MultiByteToWideChar (CP_ACP, 0, lpcszStr, -1, NULL, 0);

	if(dwBufSize < dwMinSize)
	{
		return false;
	}
	MultiByteToWideChar (CP_ACP, 0, lpcszStr, -1, lpwszStr, dwMinSize); 
	return true;
}

bool ToolFunctionSet::WCharToMByte(LPWSTR lpwszStr, DWORD dwBufSize, LPSTR lpcszStr)
{
	DWORD dwMinSize;
	dwMinSize = WideCharToMultiByte(CP_ACP, 0, lpwszStr, -1, NULL, 0, NULL, NULL);

	if(dwBufSize < dwMinSize)
	{
		return FALSE;
	}
	WideCharToMultiByte (CP_ACP, 0, lpwszStr, -1, lpcszStr, dwMinSize, NULL, NULL); 
	return true;
}

bool ToolFunctionSet::GetSysCurrentTime( TCHAR* pszSystime, DWORD dwSize )
{
	SYSTEMTIME systime;
	GetLocalTime(&systime);

	StringCchPrintf(pszSystime, dwSize/sizeof(TCHAR), _T("%d-%d-%d %d-%d-%d"),\
					systime.wYear, systime.wMonth, systime.wDay,\
					systime.wHour, systime.wMinute, systime.wSecond);
	return true;
}

bool ToolFunctionSet::ConvertToMChar( CHAR *pszDes, int iDesSize, TCHAR *pszSrc )
{
	#ifndef UNICODE
		StringCchCopy(pszDes, iDesSize, pszSrc);
	#else
		WCharToMByte(pszSrc, iDesSize, pszDes);
	#endif
	return true;
}

bool ToolFunctionSet::ConvertToWChar( WCHAR *pszDes, int iDesSize, TCHAR *pszSrc )
{
	#ifndef UNICODE
		MByteToWChar(pszSrc, iDesSize, pszDes);
	#else
		StringCchCopy(pszDes, iDesSize, pszSrc);
	#endif
	return true;
}